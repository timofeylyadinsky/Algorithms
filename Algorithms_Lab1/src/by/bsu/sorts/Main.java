package by.bsu.sorts;

/*
Задание 1.1. Реализовать один из гибридных алгоритмов, сочетающий быструю
        сортировку и сортировку вставками следующим образом: в алгоритме быстрой
        сортировки, участки массива длины меньшей некоторого параметра k сортировать
        сортировкой вставками, не используя для них рекурсию быстрой сортировки.
        Проделать вычислительный эксперимент. Подобрать оптимальное k для сортировки R
        массивов длины N, элементы которых - случайные целые числа в диапазоне от 0 до M.
        Дать возможность пользователю задавать параметры R,N и M.



        Задание 1.2. Реализовать один из гибридных алгоритмов, сочетающий сортировку
            слиянием и сортировку вставками следующим образом: в алгоритме сортировки
        слиянием, участки массива длины меньшей некоторого параметра k сортировать
        сортировкой вставками, не используя для них рекурсию сортировки слиянием.
        Проделать вычислительный эксперимент. Подобрать оптимальное k для сортировки R
        массивов длины N, элементы которых - случайные целые числа в диапазоне от 0 до M.
        Дать возможность пользователю задавать параметры R,N и M.


        Задание 1.3. Подсчитать число элементарных операций в вашей реализации сортировки
        вставками.
*/


import by.bsu.sorts.handler.HybridQuickInsertion;
import by.bsu.sorts.handler.InsertionSort;

import java.util.Arrays;

public class Main {

    public static void main(String[] args) {


        int[] arr = new int[]{1,4,5,6,7,9,0,2,4,2,45,656,3,65,34,22};

        //arr = new InsertionSort().insertionSort(arr);
        arr = new HybridQuickInsertion().hybridQuickInsertionSort(arr, 1, 0, arr.length-1);
        System.out.println(Arrays.toString(arr));

    }
}
